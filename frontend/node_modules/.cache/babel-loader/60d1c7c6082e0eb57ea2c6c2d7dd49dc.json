{"ast":null,"code":"'use strict';\n/*\n * It only for Debug Remotely mode for Android\n * When __DEV__ === false, we can't use window.require('NativeModules')\n */\n\nfunction getByRemoteConfig(hostname) {\n  var remoteModuleConfig = typeof window !== 'undefined' && window.__fbBatchedBridgeConfig && window.__fbBatchedBridgeConfig.remoteModuleConfig;\n  if (!Array.isArray(remoteModuleConfig) || hostname !== 'localhost' && hostname !== '127.0.0.1') return {\n    hostname: hostname,\n    passed: false\n  };\n  var result = hostname;\n  var passed = false;\n  remoteModuleConfig.some(function (config) {\n    if (!config) return false;\n    var name = config[0];\n    var content = config[1];\n\n    if ((name === 'AndroidConstants' || name === 'PlatformConstants') && content && content.ServerHost) {\n      result = content.ServerHost.split(':')[0];\n      passed = true;\n      return true;\n    }\n\n    if (name === 'SourceCode' && content && content.scriptURL) {\n      result = content.scriptURL.replace(/https?:\\/\\//, '').split(':')[0];\n      passed = true;\n      return true;\n    }\n\n    return false;\n  });\n  return {\n    hostname: result,\n    passed: passed\n  };\n}\n\nfunction getByRNRequirePolyfill(hostname) {\n  var originalWarn = console.warn;\n  var NativeModules;\n  var Constants;\n  var SourceCode;\n\n  if (typeof window === 'undefined' || !window.__DEV__ || typeof window.require !== 'function' || // RN >= 0.56\n  // TODO: Get NativeModules for RN >= 0.56\n  window.require.name === 'metroRequire') {\n    return hostname;\n  }\n\n  console.warn = function () {\n    if (arguments[0] && typeof arguments[0].indexOf == 'function' && arguments[0].indexOf(\"Requiring module 'NativeModules' by name\") > -1) return;\n    return originalWarn.apply(console, arguments);\n  };\n\n  try {\n    NativeModules = window.require('NativeModules');\n  } catch (e) {}\n\n  console.warn = originalWarn;\n  if (!NativeModules) return hostname;\n  Constants = NativeModules.PlatformConstants || NativeModules.AndroidConstants;\n  SourceCode = NativeModules.SourceCode;\n\n  if (Constants && Constants.ServerHost) {\n    return Constants.ServerHost.split(':')[0];\n  } else if (SourceCode && SourceCode.scriptURL) {\n    return SourceCode.scriptURL.replace(/https?:\\/\\//, '').split(':')[0];\n  }\n\n  return hostname;\n}\n/*\n * Get React Native server IP if hostname is `localhost`\n * On Android emulator, the IP of host is `10.0.2.2` (Genymotion: 10.0.3.2)\n */\n\n\nmodule.exports = function (hostname) {\n  // Check if it in React Native environment\n  if (typeof __fbBatchedBridgeConfig !== 'object' || hostname !== 'localhost' && hostname !== '127.0.0.1') {\n    return hostname;\n  }\n\n  var result = getByRemoteConfig(hostname); // Leave if get hostname by remote config successful\n\n  if (result.passed) {\n    return result.hostname;\n  } // Otherwise, use RN's require polyfill\n\n\n  return getByRNRequirePolyfill(hostname);\n};","map":{"version":3,"sources":["C:/Users/aleor/Desktop/Code/wbsc/frontend/node_modules/rn-host-detect/index.js"],"names":["getByRemoteConfig","hostname","remoteModuleConfig","window","__fbBatchedBridgeConfig","Array","isArray","passed","result","some","config","name","content","ServerHost","split","scriptURL","replace","getByRNRequirePolyfill","originalWarn","console","warn","NativeModules","Constants","SourceCode","__DEV__","require","arguments","indexOf","apply","e","PlatformConstants","AndroidConstants","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n/*\n * It only for Debug Remotely mode for Android\n * When __DEV__ === false, we can't use window.require('NativeModules')\n */\nfunction getByRemoteConfig(hostname) {\n  var remoteModuleConfig = typeof window !== 'undefined' &&\n    window.__fbBatchedBridgeConfig &&\n    window.__fbBatchedBridgeConfig.remoteModuleConfig\n\n  if (\n    !Array.isArray(remoteModuleConfig) ||\n    hostname !== 'localhost' && hostname !== '127.0.0.1'\n  ) return { hostname: hostname, passed: false }\n\n  var result = hostname\n  var passed = false\n  remoteModuleConfig.some(function (config) {\n    if (!config) return false\n    \n    var name = config[0]\n    var content = config[1]\n    if (\n      (name === 'AndroidConstants' || name === 'PlatformConstants') &&\n      content &&\n      content.ServerHost\n    ) {\n      result = content.ServerHost.split(':')[0]\n      passed = true\n      return true\n    }\n\n    if (\n      name === 'SourceCode' &&\n      content &&\n      content.scriptURL\n    ) {\n      result = content.scriptURL.replace(/https?:\\/\\//, '').split(':')[0]\n      passed = true\n      return true\n    }\n    return false\n  })\n\n  return { hostname: result, passed: passed }\n}\n\nfunction getByRNRequirePolyfill(hostname) {\n  var originalWarn = console.warn\n  var NativeModules\n  var Constants\n  var SourceCode\n  if (\n    typeof window === 'undefined' ||\n    !window.__DEV__ ||\n    typeof window.require !== 'function' ||\n    // RN >= 0.56\n    // TODO: Get NativeModules for RN >= 0.56\n    window.require.name === 'metroRequire'\n  ) {\n    return hostname\n  }\n  console.warn = function() {\n    if (\n      arguments[0] &&\n      typeof arguments[0].indexOf == 'function' &&\n      arguments[0].indexOf(\"Requiring module 'NativeModules' by name\") > -1\n    )\n      return\n    return originalWarn.apply(console, arguments)\n  }\n  try {\n    NativeModules = window.require('NativeModules')\n  } catch (e) {}\n  console.warn = originalWarn\n  if (!NativeModules) return hostname\n\n  Constants = NativeModules.PlatformConstants || NativeModules.AndroidConstants\n  SourceCode = NativeModules.SourceCode\n\n  if (Constants && Constants.ServerHost) {\n    return Constants.ServerHost.split(':')[0]\n  } else if (SourceCode && SourceCode.scriptURL) {\n    return SourceCode.scriptURL.replace(/https?:\\/\\//, '').split(':')[0]\n  }\n  return hostname\n}\n\n/*\n * Get React Native server IP if hostname is `localhost`\n * On Android emulator, the IP of host is `10.0.2.2` (Genymotion: 10.0.3.2)\n */\nmodule.exports = function (hostname) {\n  // Check if it in React Native environment\n  if (\n    typeof __fbBatchedBridgeConfig !== 'object' ||\n    hostname !== 'localhost' && hostname !== '127.0.0.1'\n  ) {\n    return hostname\n  }\n  var result = getByRemoteConfig(hostname)\n\n  // Leave if get hostname by remote config successful\n  if (result.passed) {\n    return result.hostname\n  }\n\n  // Otherwise, use RN's require polyfill\n  return getByRNRequirePolyfill(hostname)\n}\n"]},"metadata":{},"sourceType":"script"}