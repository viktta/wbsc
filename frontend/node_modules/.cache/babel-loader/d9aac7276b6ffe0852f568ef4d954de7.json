{"ast":null,"code":"import axios from \"axios\";\nconst baseURL = \"http://127.0.0.1:8000/api/\";\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    Authorization: localStorage.getItem(\"access_token\") ? \"JWT \" + localStorage.getItem(\"access_token\") : null,\n    \"Content-Type\": \"application/json\",\n    accept: \"application/json\"\n  }\n});\naxiosInstance.interceptors.response.use(response => response, error => {\n  const originalRequest = error.config;\n\n  if (error.response.status === 401 && originalRequest.url === baseURL + \"token/refresh/\") {\n    window.location.href = \"/login/\";\n    return Promise.reject(error);\n  }\n\n  if (error.response.data.code === \"token_not_valid\" && error.response.status === 401 && error.response.statusText === \"Unauthorized\") {\n    const refreshToken = localStorage.getItem(\"refresh_token\");\n\n    if (refreshToken) {\n      const tokenParts = JSON.parse(atob(refreshToken.split(\".\")[1]));\n      const now = Math.ceil(Date.now() / 1000);\n      console.log(tokenParts.exp);\n\n      if (tokenParts.exp > now) {\n        return axiosInstance.post(\"/token/refresh/\", {\n          refresh: refreshToken\n        }).then(response => {\n          localStorage.setItem(\"access_token\", response.data.access);\n          localStorage.setItem(\"refresh_token\", response.data.refresh);\n          axiosInstance.defaults.headers[\"Authorization\"] = \"JWT \" + response.data.access;\n          originalRequest.headers[\"Authorization\"] = \"JWT \" + response.data.access;\n          return axiosInstance(originalRequest);\n        }).catch(err => {\n          console.log(err);\n        });\n      } else {\n        console.log(\"Refresh token is expired\", tokenParts.exp, now);\n        window.location.href = \"/login/\";\n      }\n    } else {\n      console.log(\"Refresh token not available.\");\n      window.location.href = \"/login/\";\n    }\n  }\n\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"sources":["/home/victor/Documents/Projects/wbsc/frontend/src/axiosApi.js"],"names":["axios","baseURL","axiosInstance","create","timeout","headers","Authorization","localStorage","getItem","accept","interceptors","response","use","error","originalRequest","config","status","url","window","location","href","Promise","reject","data","code","statusText","refreshToken","tokenParts","JSON","parse","atob","split","now","Math","ceil","Date","console","log","exp","post","refresh","then","setItem","access","defaults","catch","err"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst baseURL = \"http://127.0.0.1:8000/api/\";\n\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    Authorization: localStorage.getItem(\"access_token\")\n      ? \"JWT \" + localStorage.getItem(\"access_token\")\n      : null,\n    \"Content-Type\": \"application/json\",\n    accept: \"application/json\",\n  },\n});\n\naxiosInstance.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    const originalRequest = error.config;\n\n    if (\n      error.response.status === 401 &&\n      originalRequest.url === baseURL + \"token/refresh/\"\n    ) {\n      window.location.href = \"/login/\";\n      return Promise.reject(error);\n    }\n\n    if (\n      error.response.data.code === \"token_not_valid\" &&\n      error.response.status === 401 &&\n      error.response.statusText === \"Unauthorized\"\n    ) {\n      const refreshToken = localStorage.getItem(\"refresh_token\");\n\n      if (refreshToken) {\n        const tokenParts = JSON.parse(atob(refreshToken.split(\".\")[1]));\n\n        const now = Math.ceil(Date.now() / 1000);\n        console.log(tokenParts.exp);\n\n        if (tokenParts.exp > now) {\n          return axiosInstance\n            .post(\"/token/refresh/\", { refresh: refreshToken })\n            .then((response) => {\n              localStorage.setItem(\"access_token\", response.data.access);\n              localStorage.setItem(\"refresh_token\", response.data.refresh);\n\n              axiosInstance.defaults.headers[\"Authorization\"] =\n                \"JWT \" + response.data.access;\n              originalRequest.headers[\"Authorization\"] =\n                \"JWT \" + response.data.access;\n\n              return axiosInstance(originalRequest);\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n        } else {\n          console.log(\"Refresh token is expired\", tokenParts.exp, now);\n          window.location.href = \"/login/\";\n        }\n      } else {\n        console.log(\"Refresh token not available.\");\n        window.location.href = \"/login/\";\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance;\n"]},"metadata":{},"sourceType":"module"}