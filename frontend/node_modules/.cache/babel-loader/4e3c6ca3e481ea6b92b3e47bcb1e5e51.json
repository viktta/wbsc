{"ast":null,"code":"var helpers = require('../helpers');\n\nvar mark = helpers.mark;\nvar extract = helpers.extract;\nvar refer = helpers.refer;\n\nvar options = require('../constants/options');\n\nmodule.exports = function serialize(Immutable, refs, customReplacer, customReviver) {\n  function replacer(key, value) {\n    if (value instanceof Immutable.Record) return refer(value, 'ImmutableRecord', 'toObject', refs);\n    if (value instanceof Immutable.Range) return extract(value, 'ImmutableRange');\n    if (value instanceof Immutable.Repeat) return extract(value, 'ImmutableRepeat');\n    if (Immutable.OrderedMap.isOrderedMap(value)) return mark(value, 'ImmutableOrderedMap', 'toObject');\n    if (Immutable.Map.isMap(value)) return mark(value, 'ImmutableMap', 'toObject');\n    if (Immutable.List.isList(value)) return mark(value, 'ImmutableList', 'toArray');\n    if (Immutable.OrderedSet.isOrderedSet(value)) return mark(value, 'ImmutableOrderedSet', 'toArray');\n    if (Immutable.Set.isSet(value)) return mark(value, 'ImmutableSet', 'toArray');\n    if (Immutable.Seq.isSeq(value)) return mark(value, 'ImmutableSeq', 'toArray');\n    if (Immutable.Stack.isStack(value)) return mark(value, 'ImmutableStack', 'toArray');\n    return value;\n  }\n\n  function reviver(key, value) {\n    if (typeof value === 'object' && value !== null && '__serializedType__' in value) {\n      var data = value.data;\n\n      switch (value.__serializedType__) {\n        case 'ImmutableMap':\n          return Immutable.Map(data);\n\n        case 'ImmutableOrderedMap':\n          return Immutable.OrderedMap(data);\n\n        case 'ImmutableList':\n          return Immutable.List(data);\n\n        case 'ImmutableRange':\n          return Immutable.Range(data._start, data._end, data._step);\n\n        case 'ImmutableRepeat':\n          return Immutable.Repeat(data._value, data.size);\n\n        case 'ImmutableSet':\n          return Immutable.Set(data);\n\n        case 'ImmutableOrderedSet':\n          return Immutable.OrderedSet(data);\n\n        case 'ImmutableSeq':\n          return Immutable.Seq(data);\n\n        case 'ImmutableStack':\n          return Immutable.Stack(data);\n\n        case 'ImmutableRecord':\n          return refs && refs[value.__serializedRef__] ? new refs[value.__serializedRef__](data) : Immutable.Map(data);\n\n        default:\n          return data;\n      }\n    }\n\n    return value;\n  }\n\n  return {\n    replacer: customReplacer ? function (key, value) {\n      return customReplacer(key, value, replacer);\n    } : replacer,\n    reviver: customReviver ? function (key, value) {\n      return customReviver(key, value, reviver);\n    } : reviver,\n    options: options\n  };\n};","map":{"version":3,"sources":["C:/Users/aleor/Desktop/Code/wbsc/frontend/node_modules/remotedev-serialize/immutable/serialize.js"],"names":["helpers","require","mark","extract","refer","options","module","exports","serialize","Immutable","refs","customReplacer","customReviver","replacer","key","value","Record","Range","Repeat","OrderedMap","isOrderedMap","Map","isMap","List","isList","OrderedSet","isOrderedSet","Set","isSet","Seq","isSeq","Stack","isStack","reviver","data","__serializedType__","_start","_end","_step","_value","size","__serializedRef__"],"mappings":"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","sourcesContent":["var helpers = require('../helpers');\nvar mark = helpers.mark;\nvar extract = helpers.extract;\nvar refer = helpers.refer;\nvar options= require('../constants/options');\n\nmodule.exports = function serialize(Immutable, refs, customReplacer, customReviver) {\n  function replacer(key, value) {\n    if (value instanceof Immutable.Record) return refer(value, 'ImmutableRecord', 'toObject', refs);\n    if (value instanceof Immutable.Range) return extract(value, 'ImmutableRange');\n    if (value instanceof Immutable.Repeat) return extract(value, 'ImmutableRepeat');\n    if (Immutable.OrderedMap.isOrderedMap(value)) return mark(value, 'ImmutableOrderedMap', 'toObject');\n    if (Immutable.Map.isMap(value)) return mark(value, 'ImmutableMap', 'toObject');\n    if (Immutable.List.isList(value)) return mark(value, 'ImmutableList', 'toArray');\n    if (Immutable.OrderedSet.isOrderedSet(value)) return mark(value, 'ImmutableOrderedSet', 'toArray');\n    if (Immutable.Set.isSet(value)) return mark(value, 'ImmutableSet', 'toArray');\n    if (Immutable.Seq.isSeq(value)) return mark(value, 'ImmutableSeq', 'toArray');\n    if (Immutable.Stack.isStack(value)) return mark(value, 'ImmutableStack', 'toArray');\n    return value;\n  }\n\n  function reviver(key, value) {\n    if (typeof value === 'object' && value !== null && '__serializedType__'  in value) {\n      var data = value.data;\n      switch (value.__serializedType__) {\n        case 'ImmutableMap': return Immutable.Map(data);\n        case 'ImmutableOrderedMap': return Immutable.OrderedMap(data);\n        case 'ImmutableList': return Immutable.List(data);\n        case 'ImmutableRange': return Immutable.Range(data._start, data._end, data._step);\n        case 'ImmutableRepeat': return Immutable.Repeat(data._value, data.size);\n        case 'ImmutableSet': return Immutable.Set(data);\n        case 'ImmutableOrderedSet': return Immutable.OrderedSet(data);\n        case 'ImmutableSeq': return Immutable.Seq(data);\n        case 'ImmutableStack': return Immutable.Stack(data);\n        case 'ImmutableRecord':\n          return refs && refs[value.__serializedRef__]\n            ? new refs[value.__serializedRef__](data)\n            : Immutable.Map(data);\n        default: return data;\n      }\n    }\n    return value;\n  }\n\n  return {\n    replacer: customReplacer\n      ? function(key, value) {\n        return customReplacer(key, value, replacer);\n      }\n      : replacer,\n    reviver: customReviver\n      ? function(key, value) {\n        return customReviver(key, value, reviver);\n      }\n      : reviver,\n    options: options\n  }   \n};\n"]},"metadata":{},"sourceType":"script"}