{"ast":null,"code":"// This alphabet uses a-z A-Z 0-9 _- symbols.\n// Symbols are generated for smaller size.\n// -_zyxwvutsrqponmlkjihgfedcba9876543210ZYXWVUTSRQPONMLKJIHGFEDCBA\nvar url = '-_'; // Loop from 36 to 0 (from z to a and 9 to 0 in Base36).\n\nvar i = 36;\n\nwhile (i--) {\n  // 36 is radix. Number.prototype.toString(36) returns number\n  // in Base36 representation. Base36 is like hex, but it uses 0–9 and a-z.\n  url += i.toString(36);\n} // Loop from 36 to 10 (from Z to A in Base36).\n\n\ni = 36;\n\nwhile (i-- - 10) {\n  url += i.toString(36).toUpperCase();\n}\n/**\n * Generate URL-friendly unique ID. This method use non-secure predictable\n * random generator with bigger collision probability.\n *\n * @param {number} [size=21] The number of symbols in ID.\n *\n * @return {string} Random string.\n *\n * @example\n * const nanoid = require('nanoid/non-secure')\n * model.id = nanoid() //=> \"Uakgb_J5m9g-0JDMbcJqL\"\n *\n * @name nonSecure\n * @function\n */\n\n\nmodule.exports = function (size) {\n  var id = '';\n  i = size || 21; // Compact alternative for `for (var i = 0; i < size; i++)`\n\n  while (i--) {\n    // `| 0` is compact and faster alternative for `Math.floor()`\n    id += url[Math.random() * 64 | 0];\n  }\n\n  return id;\n};","map":{"version":3,"sources":["C:/Users/aleor/Desktop/Code/wbsc/frontend/node_modules/nanoid/non-secure/index.js"],"names":["url","i","toString","toUpperCase","module","exports","size","id","Math","random"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,GAAG,GAAG,IAAV,C,CACA;;AACA,IAAIC,CAAC,GAAG,EAAR;;AACA,OAAOA,CAAC,EAAR,EAAY;AACV;AACA;AACAD,EAAAA,GAAG,IAAIC,CAAC,CAACC,QAAF,CAAW,EAAX,CAAP;AACD,C,CACD;;;AACAD,CAAC,GAAG,EAAJ;;AACA,OAAOA,CAAC,KAAK,EAAb,EAAiB;AACfD,EAAAA,GAAG,IAAIC,CAAC,CAACC,QAAF,CAAW,EAAX,EAAeC,WAAf,EAAP;AACD;AAED;;;;;;;;;;;;;;;;;AAeAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAC/B,MAAIC,EAAE,GAAG,EAAT;AACAN,EAAAA,CAAC,GAAGK,IAAI,IAAI,EAAZ,CAF+B,CAG/B;;AACA,SAAOL,CAAC,EAAR,EAAY;AACV;AACAM,IAAAA,EAAE,IAAIP,GAAG,CAACQ,IAAI,CAACC,MAAL,KAAgB,EAAhB,GAAqB,CAAtB,CAAT;AACD;;AACD,SAAOF,EAAP;AACD,CATD","sourcesContent":["// This alphabet uses a-z A-Z 0-9 _- symbols.\n// Symbols are generated for smaller size.\n// -_zyxwvutsrqponmlkjihgfedcba9876543210ZYXWVUTSRQPONMLKJIHGFEDCBA\nvar url = '-_'\n// Loop from 36 to 0 (from z to a and 9 to 0 in Base36).\nvar i = 36\nwhile (i--) {\n  // 36 is radix. Number.prototype.toString(36) returns number\n  // in Base36 representation. Base36 is like hex, but it uses 0–9 and a-z.\n  url += i.toString(36)\n}\n// Loop from 36 to 10 (from Z to A in Base36).\ni = 36\nwhile (i-- - 10) {\n  url += i.toString(36).toUpperCase()\n}\n\n/**\n * Generate URL-friendly unique ID. This method use non-secure predictable\n * random generator with bigger collision probability.\n *\n * @param {number} [size=21] The number of symbols in ID.\n *\n * @return {string} Random string.\n *\n * @example\n * const nanoid = require('nanoid/non-secure')\n * model.id = nanoid() //=> \"Uakgb_J5m9g-0JDMbcJqL\"\n *\n * @name nonSecure\n * @function\n */\nmodule.exports = function (size) {\n  var id = ''\n  i = size || 21\n  // Compact alternative for `for (var i = 0; i < size; i++)`\n  while (i--) {\n    // `| 0` is compact and faster alternative for `Math.floor()`\n    id += url[Math.random() * 64 | 0]\n  }\n  return id\n}\n"]},"metadata":{},"sourceType":"script"}