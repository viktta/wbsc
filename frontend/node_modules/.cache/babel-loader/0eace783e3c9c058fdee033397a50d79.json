{"ast":null,"code":"function mark(data, type, transformMethod) {\n  return {\n    data: transformMethod ? data[transformMethod]() : data,\n    __serializedType__: type\n  };\n}\n\nfunction extract(data, type) {\n  return {\n    data: Object.assign({}, data),\n    __serializedType__: type\n  };\n}\n\nfunction refer(data, type, isArray, refs) {\n  var r = mark(data, type, isArray);\n  if (!refs) return r;\n\n  for (var i = 0; i < refs.length; i++) {\n    var ref = refs[i];\n\n    if (typeof ref === 'function' && data instanceof ref) {\n      r.__serializedRef__ = i;\n      return r;\n    }\n  }\n\n  return r;\n}\n\nmodule.exports = {\n  mark: mark,\n  extract: extract,\n  refer: refer\n};","map":{"version":3,"sources":["C:/Users/aleor/Desktop/Code/wbsc/frontend/node_modules/remotedev-serialize/helpers/index.js"],"names":["mark","data","type","transformMethod","__serializedType__","extract","Object","assign","refer","isArray","refs","r","i","length","ref","__serializedRef__","module","exports"],"mappings":"AAAA,SAASA,IAAT,CAAcC,IAAd,EAAoBC,IAApB,EAA0BC,eAA1B,EAA2C;AACzC,SAAO;AACLF,IAAAA,IAAI,EAAEE,eAAe,GAAGF,IAAI,CAACE,eAAD,CAAJ,EAAH,GAA6BF,IAD7C;AAELG,IAAAA,kBAAkB,EAAEF;AAFf,GAAP;AAID;;AAED,SAASG,OAAT,CAAiBJ,IAAjB,EAAuBC,IAAvB,EAA6B;AAC3B,SAAO;AACLD,IAAAA,IAAI,EAAEK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,IAAlB,CADD;AAELG,IAAAA,kBAAkB,EAAEF;AAFf,GAAP;AAID;;AAED,SAASM,KAAT,CAAeP,IAAf,EAAqBC,IAArB,EAA2BO,OAA3B,EAAoCC,IAApC,EAA0C;AACxC,MAAIC,CAAC,GAAGX,IAAI,CAACC,IAAD,EAAOC,IAAP,EAAaO,OAAb,CAAZ;AACA,MAAI,CAACC,IAAL,EAAW,OAAOC,CAAP;;AACX,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAIE,GAAG,GAAGJ,IAAI,CAACE,CAAD,CAAd;;AACA,QAAI,OAAOE,GAAP,KAAe,UAAf,IAA6Bb,IAAI,YAAYa,GAAjD,EAAsD;AACpDH,MAAAA,CAAC,CAACI,iBAAF,GAAsBH,CAAtB;AACA,aAAOD,CAAP;AACD;AACF;;AACD,SAAOA,CAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiB;AACfjB,EAAAA,IAAI,EAAEA,IADS;AAEfK,EAAAA,OAAO,EAAEA,OAFM;AAGfG,EAAAA,KAAK,EAAEA;AAHQ,CAAjB","sourcesContent":["function mark(data, type, transformMethod) {\n  return {\n    data: transformMethod ? data[transformMethod]() : data,\n    __serializedType__: type\n  };\n}\n\nfunction extract(data, type) {\n  return {\n    data: Object.assign({}, data),\n    __serializedType__: type\n  };\n}\n\nfunction refer(data, type, isArray, refs) {\n  var r = mark(data, type, isArray);\n  if (!refs) return r;\n  for (var i = 0; i < refs.length; i++) {\n    var ref = refs[i];\n    if (typeof ref === 'function' && data instanceof ref) {\n      r.__serializedRef__ = i;\n      return r;\n    }\n  }\n  return r;\n}\n\nmodule.exports = {\n  mark: mark,\n  extract: extract,\n  refer: refer\n};\n"]},"metadata":{},"sourceType":"script"}